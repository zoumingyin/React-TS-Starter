---
alwaysApply: true
---
# 前端开发规范

## 技术栈

本项目使用以下技术栈：
- **框架**: React 18
- **语言**: TypeScript
- **UI库**: Ant Design (Antd)
- **构建工具**: Vite
- **状态管理**: MobX
- **样式方案**: UnoCSS + SCSS
- **国际化**: i18next + react-i18next
- **路由**: React Router v7
- **包管理**: pnpm

## 项目结构

项目采用分层架构组织：

```
src/
├── components/          # 通用组件
├── pages/              # 页面组件
├── layouts/            # 布局组件
├── hooks/              # 自定义 Hooks
├── store/              # MobX 状态管理
├── services/           # API 服务
├── router/             # 路由配置
├── locales/            # 国际化资源
├── assets/             # 静态资源
├── styles/             # 全局样式
└── theme/              # 主题配置
```

## React 开发规范

### 1. 组件编写

- 使用函数式组件 + Hooks
- 组件名使用 PascalCase
- 组件文件使用 .tsx 扩展名
- 优先使用箭头函数而非函数声明
- 使用严格模式进行类型检查

```typescript
// ✅ 推荐
const UserCard = ({ name, age }: UserCardProps) => {
  return <div>...</div>;
};

// ❌ 不推荐
function UserCard({ name, age }: UserCardProps) {
  return <div>...</div>;
}


```

### 2. Hooks 使用

- 自定义 Hook 以 `use` 开头
- 将共享逻辑提取到自定义 Hooks
- 使用 Hooks 时遵守官方规则

### 3. Props 类型定义

```typescript
interface ComponentProps {
  title: string;
  count?: number;
  onClick: (id: string) => void;
  children: React.ReactNode;
}
```

## TypeScript 规范

### 1. 类型定义

- 使用 interface 定义对象类型
- 使用 type 定义联合类型和复杂类型
- 避免使用 any，使用 unknown 替代
- 优先使用类型推断

```typescript
// ✅ 推荐
interface User {
  id: string;
  name: string;
}

// ❌ 避免
const user: any = {};
```

### 2. 泛型使用

合理使用泛型提高代码复用性：

```typescript
function useState<T>(initialValue: T): [T, (value: T) => void] {
  // ...
}
```

## Ant Design 使用规范

### 1. 组件导入

使用按需导入，避免全量导入：

```typescript
// ✅ 推荐
import { Button, Form, Input } from 'antd';
import { SettingOutlined } from '@ant-design/icons';

// ❌ 避免
import * from 'antd';
```

### 2. 表单组件

- 使用 Form 的 `<Form.Item>` 结构
- 使用 `initialValues` 设置初始值
- 使用 `onFinish` 处理提交
- 表单验证使用内置 rules

```typescript
const [form] = Form.useForm();

<Form form={form} onFinish={handleSubmit}>
  <Form.Item name="username" rules={[{ required: true }]}>
    <Input placeholder="请输入用户名" />
  </Form.Item>
</Form>
```

### 3. 表格组件

- 使用 `columns` 定义列
- 使用 `dataSource` 提供数据
- 分页使用 `pagination` 属性
- 复杂操作使用 render 函数

## MobX 状态管理

### 1. Store 定义

使用 `makeObservable` 或 `makeAutoObservable`：

```typescript
import { makeAutoObservable } from 'mobx';

class UserStore {
  name = '';
  age = 0;

  constructor() {
    makeAutoObservable(this);
  }

  setName(name: string) {
    this.name = name;
  }
}

export default new UserStore();
```

### 2. 组件中使用

使用 `observer` 包裹组件使其响应式：

```typescript
import { observer } from 'mobx-react-lite';
import userStore from '@/store/userStore';

const UserProfile = observer(() => {
  return <div>{userStore.name}</div>;
});
```

## UnoCSS 样式规范

### 1. 原子类使用

优先使用 UnoCSS 原子类：

```tsx
// ✅ 推荐
<div className="flex items-center gap-4 p-4">
  <span className="text-blue-500">Hello</span>
</div>
```

### 2. 自定义样式

复杂样式使用 SCSS 文件：

- 组件样式文件与组件文件同目录
- 全局样式放在 `styles/global.scss`
- 使用 BEM 命名规范

## 代码质量

### 1. 命名规范

- 组件：PascalCase (UserCard)
- 函数/变量：camelCase (getUserData)
- 常量：UPPER_SNAKE_CASE (MAX_SIZE)
- 接口/类型：PascalCase (UserInfo)

### 2. 导入顺序

```typescript
// 1. React 相关
import { useState } from 'react';
import { observer } from 'mobx-react-lite';

// 2. 第三方库
import { Button, Form } from 'antd';
import axios from 'axios';

// 3. 项目内部
import userStore from '@/store/userStore';
import { getApiData } from '@/services/api';

// 4. 类型定义
import type { UserInfo } from '@/types';
```

### 3. 注释规范

- 复杂逻辑必须添加注释
- 使用 JSDoc 风格注释函数
- 组件顶部注释说明用途

```typescript
/**
 * 用户信息卡片组件
 * @param userInfo - 用户信息对象
 * @returns JSX 元素
 */
const  UserCard =({ userInfo }: Props)=> {
  // ...
}
export default UserCard
```

## 性能优化

1. 使用 React.memo 避免不必要的渲染
2. 使用 useMemo 缓存计算结果
3. 使用 useCallback 缓存函数引用
4. 列表渲染使用 key 属性
5. 路由懒加载使用 React.lazy

## 错误处理

1. 使用 ErrorBoundary 捕获组件错误
2. API 调用必须进行错误处理
3. 表单验证提示要友好
4. 加载状态和错误状态要有明确反馈

## 测试

- 关键业务逻辑编写单元测试
- 组件测试使用 React Testing Library
- E2E 测试使用 Playwright 或 Cypress

## Git 提交规范

```
feat: 新功能
fix: 修复 bug
docs: 文档更新
style: 代码格式调整
refactor: 代码重构
perf: 性能优化
test: 测试相关
chore: 构建/工具链相关
```

## 项目配置

- 路径别名：使用 `@` 指向 `src` 目录
- 开发服务器：运行在 `http://localhost:5173`
- API 代理：`/api` 代理到后端服务

## 最佳实践总结

1. **保持组件简单**: 单一职责原则
2. **合理抽象**: 避免过度设计
3. **类型安全**: 充分利用 TypeScript
4. **响应式设计**: 确保多端适配
5. **可维护性**: 代码要易于理解和修改
6. **用户体验**: 注重交互细节
7. **性能优先**: 关注渲染性能
8. **代码复用**: 避免重复代码
